import streamlit as st
import pandas as pd
import plotly.express as px
import os
import json

def save_drafts(drafts, filename="data/brouillons.json"):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(drafts, f, indent=2, ensure_ascii=False)

def load_drafts(filename="data/brouillons.json"):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return []


# ============== FONCTIONS ET DONN√âES ==============
@st.cache_data
def load_data():
    """Charge les donn√©es des recettes et des ingr√©dients depuis des fichiers Excel."""
    try:
        recettes = pd.read_excel("data/recettes_complet.xlsx")
        ingredients = pd.read_excel("data/ingredients_nettoyes_et_standardises.xlsx")
        # Stockage du nom original
        recettes["original_plat"] = recettes["plat"]
        ingredients["original_plat"] = ingredients["plat"]

        # Unification des noms pour Panini Pizz
        recettes['plat'] = recettes['plat'].replace({
            'panini pizz base cr√®me': 'panini pizz',
            'panini pizz base tomate': 'panini pizz'
        })
        ingredients['plat'] = ingredients['plat'].replace({
            'panini pizz base cr√®me': 'panini pizz',
            'panini pizz base tomate': 'panini pizz'
        })
        return recettes, ingredients
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es : {e}")
        return None, None

def calculer_cout(ingredients_df: pd.DataFrame) -> pd.DataFrame:
    """Calcule le co√ªt des ingr√©dients (colonne 'Co√ªt (‚Ç¨)')."""
    ingredients_df["Co√ªt (‚Ç¨)"] = (ingredients_df["prix_kg"] * ingredients_df["quantite_g"]) / 1000
    return ingredients_df

def get_dough_cost(plat: str) -> float:
    """
    Renvoie le co√ªt de la p√¢te √† pizza :
      - panini pizz => 0.12 ‚Ç¨
      - plat finissant par S => 0.12 ‚Ç¨
      - plat finissant par M => 0.20 ‚Ç¨
      - sinon => 0 ‚Ç¨
    """
    if plat.lower() == "panini pizz":
        return 0.12
    elif plat.endswith("S"):
        return 0.12
    elif plat.endswith("M"):
        return 0.20
    else:
        return 0.0

# Dictionnaire de prix de vente
prix_vente_dict = {
    "Savoyarde S": 11.50,
    "Savoyarde M": 13.50,
    "Norvegienne S": 11.50,
    "Norvegienne M": 13.50,
    "Normande S": 11.50,
    "Normande M": 13.50,
    "Raclette S": 11.50,
    "Raclette M": 13.50,
    "4 fromages S": 11.50,
    "4 fromages M": 13.50,
    "Hanna S": 11.50,
    "Hanna M": 13.50,
    "Truffe S": 11.50,
    "Truffe M": 13.50,
    "panini pizz": 5.50,
    "Margarita S": 8.50,
    "Margarita M": 10.50,
    "Calzone S": 9.50,
    "Reine S": 9.50,
    "Reine M": 11.50,
    "Napolitaine S": 9.50,
    "Napolitaine M": 11.50,
    "Fermi√®re S": 9.50,
    "Fermi√®re M": 11.50,
    "3 Fromages S": 10.50,
    "3 Fromages M": 12.50,
    "Calzone S": 9.50,
    "Orientale S": 10.50,
    "Orientale M": 12.50,
    "Carn√©e S": 10.50,
    "Carn√©e M": 12.50,
    "Paysanne S": 10.50,
    "Paysanne M": 12.50,
    "Aubergine S": 10.50,
    "Aubergine M": 12.50,
    "Ch√®vre-Miel S": 9.50,
    "Ch√®vre-Miel M": 11.50,
    "Charcuti√®re S": 10.50,
    "Charcuti√®re M": 12.50,
    "Mexicaine S": 10.50,
    "Mexicaine M": 12.50,
    "4 Saisons S": 10.50,
    "4 Saisons M": 12.50,
    "Silicienne S": 10.50,
    "Silicienne M": 12.50,
    "V√©g√©tarienne S": 10.50,
    "V√©g√©tarienne M": 12.50,
    "Margarita S": 8.50,
    "Margarita M": 10.50
}

# Dictionnaire d'images (exemple)
images_plats = {
    "Savoyarde S": "savoyarde.webp",
    "Savoyarde M": "savoyarde.webp",
    "Norvegienne S": "Norv√©gienne.webp",
    "Norvegienne M": "Norv√©gienne.webp",
    "Normande S": "Normande.webp",
    "Normande M": "Normande.webp",
    "Raclette S": "Raclette.webp",
    "Raclette M": "Raclette.webp",
    "4 fromages S": "pizza_4fromages.webp",
    "4 fromages M": "pizza_4fromages.webp",
    "Hanna S": "Hanna.webp",
    "Hanna M": "Hanna.webp",
    "Truffe S": "pizza_truffe.webp",
    "Truffe M": "pizza_truffe.webp",
    "panini pizz": "Panini_pizz_creme.webp",
    "Margarita S": "marga.webp",
    "Margarita M": "marga.webp",
    "Calzone S": "Calzone.webp",
    "Reine S": "Reine.webp",
    "Reine M": "Reine.webp",
    "Paysanne S": "Paysanne.webp",
    "Paysanne M": "Paysanne.webp",
    "Ch√®vre-Miel S": "chevre-miel.webp",
    "Ch√®vre-Miel M": "chevre-miel.webp",
    "Aubergine S": "Aubergine.webp",
    "Aubergine M": "Aubergine.webp",
    "Napolitaine S": "Napo.webp",
    "Napolitaine M": "Napo.webp",
    "Fermi√®re S": "fermiere.webp",
    "Fermi√®re M": "fermiere.webp",
    "3 Fromages S": "3Fromage.webp",
    "3 Fromages M": "3Fromage.webp",
    "Orientale S": "Orientale.webp",
    "Orientale M": "Orientale.webp",
    "Carn√©e S": "Carn√©e.webp",
    "Carn√©e M": "Carn√©e.webp",
    "Mexicaine S": "Mexicaine.webp",
    "Mexicaine M": "Mexicaine.webp",
    "Charcuti√®re S": "charcut.webp",
    "Charcuti√®re M": "charcut.webp",
    "V√©g√©tarienne S": "Vege.webp",
    "V√©g√©tarienne M": "Vege.webp",
    "Silicienne S": "Sicili.webp",
    "Silicienne M": "Sicili.webp",
    "4 Saisons S": "4 saisons.webp",
    "4 Saisons M": "4 saisons.webp",
}

def afficher_image_plat(plat: str, images_dict: dict):
    """Affiche l'image du plat ou l'image par d√©faut."""
    image_path = f'images/{images_dict.get(plat, "default.jpg")}'
    if not os.path.exists(image_path):
        image_path = "images/default.jpg"
    st.image(image_path, use_container_width=True)

def generer_detailed_breakdown(plat, composition_finale, cout_matiere, prix_vente):
    """
    G√©n√®re une cha√Æne de texte expliquant le calcul.
    """
    breakdown = f"**D√©tails du calcul pour {plat}**\n\n"
    for idx, row in composition_finale.iterrows():
        breakdown += f"- {row['ingredient']}: {row['Co√ªt (‚Ç¨)']:.2f} ‚Ç¨\n"
    breakdown += f"\n**Co√ªt Mati√®re (ingr√©dients + p√¢te)**: {cout_matiere:.2f} ‚Ç¨\n"
    return breakdown

# ============== CONFIGURATION DE LA PAGE ==============
st.set_page_config(page_title="üçï Fiche Technique - Chez Antoine", layout="wide")

# ============== STYLES CSS ==============
st.markdown("""
<style>
  @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');
  html, body, [class*="css"] {
    font-family: 'Roboto', sans-serif;
  }
  .title-card {
    color: #D92332;
    padding-bottom: 15px;
  }
  .metric-card {
    background-color: #FFF;
    border-radius: 10px;
    padding: 15px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    text-align: center;
    margin-bottom: 15px;
  }
  .metric-value {
    font-size: 24px;
    font-weight: 700;
    color: #D92332;
  }
  .metric-title {
    font-size: 14px;
    font-weight: 500;
    color: #555;
  }
</style>
""", unsafe_allow_html=True)

# ============== TITRE PRINCIPAL ==============
st.markdown("<h1 class='title-card'>üçΩÔ∏è Fiche Technique - Chez Antoine</h1>", unsafe_allow_html=True)

# ============== CHARGEMENT DES DONN√âES ==============
recettes, ingredients = load_data()
if recettes is None or ingredients is None:
    st.stop()

# ============== SIDEBAR : PARAM√àTRES ==============
st.sidebar.markdown("<h3 style='color: #D92332;'>üìå Param√®tres</h3>", unsafe_allow_html=True)

# Choix du mode d'analyse
mode_analysis = st.sidebar.radio("Mode d'analyse", ["Analyse d'un plat", "Analyse comparative", "Modifier un plat"], key="mode_analysis")

# Coefficient surplus (cl√© unique pour √©viter les conflits)
coeff_surplus = st.sidebar.slider("Coefficient surplus", 1.0, 2.0, 1.25, 0.05, key="coeff_surplus")

# ============== TRAITEMENT DES MODES ==============
if mode_analysis == "Analyse d'un plat":
    plat = st.sidebar.selectbox("Choisissez un plat", recettes["plat"].unique(), key="plat_unique")
    
    # 1. Filtrer les ingr√©dients et calculer leur co√ªt
    ingr_plat = ingredients[ingredients['plat'].str.lower() == plat.lower()].copy()
    ingr_plat = calculer_cout(ingr_plat)
    
    # 2. Co√ªt mati√®re initial + p√¢te
    cout_matiere = ingr_plat["Co√ªt (‚Ç¨)"].sum() + get_dough_cost(plat)
    composition_finale = ingr_plat.copy()
    
    # 3. Ajouter la p√¢te √† pizza si n√©cessaire
    pate_cost = get_dough_cost(plat)
    if pate_cost > 0:
        composition_finale = pd.concat([
            composition_finale,
            pd.DataFrame([{
                "ingredient": "P√¢te √† pizza",
                "quantite_g": 0,
                "prix_kg": 0,
                "Co√ªt (‚Ç¨)": pate_cost,
                "ingredient_lower": "p√¢te √† pizza"
            }])
        ], ignore_index=True)
    
    # 4. Traitement sp√©cifique Panini Pizz
    if plat.lower() == "panini pizz":
        cost_creme = ingr_plat.loc[ingr_plat["ingredient"].str.lower() == "cr√®me", "Co√ªt (‚Ç¨)"].sum()
        cost_sauce = ingr_plat.loc[ingr_plat["ingredient"].str.lower() == "sauce tomate", "Co√ªt (‚Ç¨)"].sum()
        base_selection = st.sidebar.radio("Choisissez la base du panini :", ["Cr√®me", "Sauce Tomate"], index=0, key="base_panini")
        cost_base = cost_creme if base_selection == "Cr√®me" else cost_sauce

        additional = ingr_plat[~ingr_plat["ingredient"].str.lower().isin(["cr√®me", "sauce tomate"])]
        avg_add = additional["Co√ªt (‚Ç¨)"].mean() if not additional.empty else 0.0

        mode_avance = st.sidebar.checkbox("‚≠ê Mode avanc√© : Choisir deux ingr√©dients manuellement", key="mode_avance")
        if base_selection == "Cr√®me":
            composition_candidates = ingr_plat[ingr_plat["original_plat"].str.contains("base cr√®me", case=False, na=False)].copy()
        else:
            composition_candidates = ingr_plat[ingr_plat["original_plat"].str.contains("base tomate", case=False, na=False)].copy()

        if not mode_avance:
            cout_panini = cost_base + 2 * avg_add
            df_fake_avg = pd.DataFrame()
            if not additional.empty:
                row_avg = {
                    "ingredient": "Moyenne suppl",
                    "quantite_g": 0,
                    "prix_kg": 0,
                    "Co√ªt (‚Ç¨)": avg_add,
                    "ingredient_lower": "moyenne suppl"
                }
                df_fake_avg = pd.DataFrame([row_avg, row_avg])
            if base_selection == "Cr√®me":
                df_base = composition_candidates[composition_candidates["ingredient"].str.lower() == "cr√®me"]
            else:
                df_base = composition_candidates[composition_candidates["ingredient"].str.lower() == "sauce tomate"]
            composition_finale = pd.concat([df_base, df_fake_avg], ignore_index=True)
        else:
            st.write("Vous pouvez choisir deux fois le m√™me ingr√©dient si vous le souhaitez.")
            already_included = ["cr√®me", "sauce tomate"]
            additional_clean = additional.drop_duplicates(subset=["ingredient"])
            all_ingrs = list(additional_clean.loc[~additional_clean["ingredient"].str.lower().isin(already_included), "ingredient"].unique())
            slot1 = st.sidebar.selectbox("Ingr√©dient #1", ["Aucun"] + all_ingrs, key="slot1")
            slot2 = st.sidebar.selectbox("Ingr√©dient #2", ["Aucun"] + all_ingrs, key="slot2")

            cost_slot1 = additional_clean.loc[additional_clean["ingredient"] == slot1, "Co√ªt (‚Ç¨)"].iloc[0] if slot1 != "Aucun" else 0
            cost_slot2 = additional_clean.loc[additional_clean["ingredient"] == slot2, "Co√ªt (‚Ç¨)"].iloc[0] if slot2 != "Aucun" else 0
            cout_panini = cost_base + cost_slot1 + cost_slot2

            composition_finale = pd.DataFrame(columns=composition_candidates.columns)
            if base_selection == "Cr√®me":
                df_base = composition_candidates.loc[composition_candidates["ingredient"].str.lower() == "cr√®me"].iloc[[0]]
            else:
                df_base = composition_candidates.loc[composition_candidates["ingredient"].str.lower() == "sauce tomate"].iloc[[0]]
            composition_finale = pd.concat([composition_finale, df_base], ignore_index=True)
            if slot1 != "Aucun":
                composition_finale = pd.concat([
                    composition_finale,
                    additional_clean.loc[additional_clean["ingredient"] == slot1]
                ], ignore_index=True)
            if slot2 != "Aucun":
                composition_finale = pd.concat([
                    composition_finale,
                    additional_clean.loc[additional_clean["ingredient"] == slot2]
                ], ignore_index=True)
        # Gestion de la Mozzarella
        composition_finale = composition_finale[composition_finale["ingredient"].str.lower() != "mozzarella"]
        cost_mozza = 0.234  # Co√ªt final pour 40g de mozzarella
        row_mozza = pd.DataFrame([{
            "ingredient": "Mozzarella",
            "quantite_g": 40,
            "prix_kg": 5.85,
            "Co√ªt (‚Ç¨)": cost_mozza,
            "ingredient_lower": "mozzarella"
        }])
        composition_finale = pd.concat([composition_finale, row_mozza], ignore_index=True)
        # ‚úÖ Ajout p√¢te (visuellement et comptablement)
        row_pate = pd.DataFrame([{
            "ingredient": "P√¢te √† panini",
            "quantite_g": 0,
            "prix_kg": 0,
            "Co√ªt (‚Ç¨)": pate_cost,
            "ingredient_lower": "p√¢te √† panini"
        }])
        composition_finale = pd.concat([composition_finale, row_pate], ignore_index=True)

        # Total panini = base + ingr. + mozza + p√¢te
        cout_panini += cost_mozza + pate_cost

        # Calcul de la diff√©rence
        base_ingr_cost = ingr_plat["Co√ªt (‚Ç¨)"].sum()
        difference = cout_panini - base_ingr_cost
        cout_matiere += difference
    # Fin du traitement sp√©cifique Panini
    
    # 5. Calcul du co√ªt g√©n√©reux (avec coefficient)
    cout_genereux = cout_matiere * coeff_surplus
    
    # 6. R√©cup√©ration du prix de vente et calcul de la marge
    prix_vente = prix_vente_dict.get(plat, None)
    marge_brute = prix_vente - cout_matiere if prix_vente else None
    if marge_brute is not None and prix_vente and prix_vente > 0:
        taux_marge = (marge_brute / prix_vente) * 100
    else:
        taux_marge = None
    
    # 7. Regroupement final des ingr√©dients
    my_agg = {
        "quantite_g": "sum",
        "prix_kg": "mean",
        "Co√ªt (‚Ç¨)": "sum",
        "original_plat": "first",
        "ingredient_lower": "first"
    }
    grouped_finale = composition_finale.groupby("ingredient", as_index=False).agg(my_agg)
    
    # 8. G√©n√©ration d'un texte explicatif
    detailed_breakdown = generer_detailed_breakdown(plat, grouped_finale, cout_matiere, prix_vente)
    
    # Affichage des KPI
    cols = st.columns(5)
    with cols[0]:
        val = f"{prix_vente:.2f}‚Ç¨" if prix_vente else "N/A"
        st.markdown(
            f"<div class='metric-card'>"
            f"<div class='metric-value'>{val}</div>"
            f"<div class='metric-title'>Prix Vente</div>"
            f"</div>", unsafe_allow_html=True
        )
    with cols[1]:
        val = f"{cout_matiere:.2f}‚Ç¨"
        st.markdown(
            f"<div class='metric-card'>"
            f"<div class='metric-value'>{val}</div>"
            f"<div class='metric-title'>Co√ªt Mati√®re</div>"
            f"</div>", unsafe_allow_html=True
        )
    with cols[2]:
        val = f"{cout_genereux:.2f}‚Ç¨"
        added_percent = (coeff_surplus - 1) * 100  # ex: 1.08 => 8%
        st.markdown(
            f"<div class='metric-card'>"
            f"<div class='metric-value'>{val}</div>"
            f"<div style='font-size:13px; color: #999;'>"
            f"(+{added_percent:.0f}%)"
            f"</div>"
            f"<div class='metric-title'>Co√ªt G√©n√©reux</div>"
            f"</div>", 
            unsafe_allow_html=True
        )
    with cols[3]:
        val = f"{marge_brute:.2f}‚Ç¨" if marge_brute is not None else "N/A"
        st.markdown(
            f"<div class='metric-card'>"
            f"<div class='metric-value'>{val}</div>"
            f"<div class='metric-title'>Marge Brute</div>"
            f"</div>", unsafe_allow_html=True
        )
    with cols[4]:
        val = f"{taux_marge:.1f}%" if taux_marge is not None else "N/A"
        st.markdown(
            f"<div class='metric-card'>"    
            f"<div class='metric-value'>{val}</div>"
            f"<div class='metric-title'>Taux de Marge</div>"
            f"</div>", unsafe_allow_html=True
        )
    
    # Affichage de l'image et des d√©tails
    col1, col2 = st.columns([1, 2])
    with col1:
        afficher_image_plat(plat, images_plats)
    with col2:
        if not grouped_finale.empty:
            top_ing = grouped_finale.sort_values("Co√ªt (‚Ç¨)", ascending=False).iloc[0]
            part = (top_ing["Co√ªt (‚Ç¨)"] / cout_matiere) * 100 if cout_matiere > 0 else 0
            st.markdown(f"""
<div style="padding: 0.8rem 1rem; border-left: 4px solid #2563eb; background-color: #f9fafb; border-radius: 6px;">
  <span style="font-weight: 600; font-size: 1rem;">üîé Focus Ingr√©dient Principal</span><br>
  <span style="font-size: 0.95rem;">
    L'ingr√©dient le plus co√ªteux est <strong>{top_ing['ingredient']}</strong>, repr√©sentant <strong>{part:.1f}%</strong> du co√ªt mati√®re total (<em>{top_ing['Co√ªt (‚Ç¨)']:.2f} ‚Ç¨</em>).
  </span>
</div>
""", unsafe_allow_html=True)

    if taux_marge is not None:
        if taux_marge >= 70:
            st.success("‚úÖ Ce plat est **tr√®s rentable** (marge sup√©rieure √† 70%).")
        elif taux_marge >= 50:
            st.warning("‚ö†Ô∏è Rentabilit√© **correcte** mais am√©liorable (entre 50% et 70%).")
        else:
            st.error("‚ùå Rentabilit√© **faible** (marge inf√©rieure √† 50%).")

    st.subheader("üõí Composition du Plat")
    affichage_final = grouped_finale[["ingredient", "quantite_g", "prix_kg", "Co√ªt (‚Ç¨)"]].copy()
    affichage_final.rename(columns={
        'ingredient': 'Ingr√©dient',
        'quantite_g': 'Quantit√© (g)',
        'prix_kg': 'Prix (‚Ç¨/kg)',
        'Co√ªt (‚Ç¨)': 'Co√ªt (‚Ç¨)'
    }, inplace=True)
    st.dataframe(affichage_final, use_container_width=True, hide_index=True)
    
    st.subheader("üìâ R√©partition des co√ªts par Ingr√©dient")
    fig_pie = px.pie(grouped_finale, values="Co√ªt (‚Ç¨)", names="ingredient", hole=0.4)
    st.plotly_chart(fig_pie, use_container_width=True)
    
    st.subheader("üìà Co√ªt Mati√®re par Ingr√©dient")
    fig_bar = px.bar(grouped_finale, x="ingredient", y="Co√ªt (‚Ç¨)")
    st.plotly_chart(fig_bar, use_container_width=True)

elif mode_analysis == "Analyse comparative":
    st.subheader("üîç Analyse Comparative")

    all_plats = recettes["plat"].unique()

    selected_plats = st.sidebar.multiselect("Plats √† comparer", all_plats)
    seuil_marge = st.sidebar.slider("Seuil de rentabilit√© (%)", 40, 90, 70)
    with st.sidebar.expander("‚ùì Pourquoi 70% est un bon seuil ?"):
        st.markdown("""
    - En restauration, on vise **un taux de marge mati√®re de 70%** (ou plus).
    - Cela signifie que **30% du prix** est consacr√© aux ingr√©dients, et le reste couvre :
      - ‚úÖ Main d'≈ìuvre
      - ‚úÖ Charges (loyer, √©nergie‚Ä¶)
      - ‚úÖ B√©n√©fices

    üëâ **Moins de 50%** = souvent √† perte  
    üëâ **50‚Äì70%** = √† surveiller  
    üëâ **‚â• 70%** = bon rendement

    üìö *Source :* [EHL - √âcole H√¥teli√®re de Lausanne](https://www.ehl.edu/fr)
    """)


    classement_par = st.sidebar.radio("Crit√®re de classement", ["Marge (‚Ç¨)", "Taux (%)"])
    filtre_sous_seuil = st.sidebar.checkbox("Afficher uniquement les plats sous le seuil dans le graphe")

    with st.sidebar.expander("‚ÑπÔ∏è Quel crit√®re choisir ?"):
        st.markdown("""
        - **Marge (‚Ç¨)** : met en avant les plats qui rapportent le plus d'argent brut.
        - **Taux (%)** : montre les plats les plus efficaces proportionnellement (rentabilit√© relative).

        üëâ Exemple : un plat pas cher peut avoir un taux √©lev√© mais une petite marge en valeur.
        """)

    def analyse_plat(plat):
        ingr = ingredients[ingredients['plat'].str.lower() == plat.lower()].copy()
        ingr = calculer_cout(ingr)
        base_cost = ingr["Co√ªt (‚Ç¨)"].sum()
        dough = get_dough_cost(plat)

        if plat.lower() == "panini pizz":
            base = ingr[ingr["ingredient"].str.lower().isin(["cr√®me", "sauce tomate"])]
            base_cost = base["Co√ªt (‚Ç¨)"].sum()
            add = ingr[~ingr["ingredient"].str.lower().isin(["cr√®me", "sauce tomate"])]
            avg_add = add["Co√ªt (‚Ç¨)"].mean() if not add.empty else 0.0
            total_cost = base_cost + 2 * avg_add + 0.234 + dough
        else:
            total_cost = base_cost + dough

        prix = prix_vente_dict.get(plat, 0)
        marge = prix - total_cost
        taux = (marge / prix * 100) if prix > 0 else None

        if taux is None:
            note = "‚ùì Donn√©es manquantes"
        elif taux >= 70 and marge >= 5:
            note = "üîù Excellent ‚Äî tr√®s rentable"
        elif taux >= 70:
            note = "üí° Bon rendement ‚Äî petit gain"
        elif taux >= 50 and marge >= 5:
            note = "üëç Correct ‚Äî √† surveiller"
        elif taux >= 50:
            note = "‚ö†Ô∏è Faible gain ‚Äî am√©liorable"
        else:
            note = "‚ùå √Ä revoir ‚Äî non rentable"

        prix_conseille = total_cost / (1 - seuil_marge / 100) if seuil_marge < 100 else None
        delta_prix = prix_conseille - prix if prix_conseille else None
        delta_pct = (delta_prix / prix * 100) if prix > 0 and delta_prix else None

        if delta_pct is None:
            ajustement = "‚ùì"
        elif delta_pct <= 10:
            ajustement = "‚úÖ raisonnable"
        elif delta_pct <= 25:
            ajustement = "‚ö†Ô∏è √† √©tudier"
        else:
            ajustement = "‚ùå trop √©cart√©"

        return {
            "Plat": plat,
            "Prix (‚Ç¨)": round(prix, 2),
            "Co√ªt (‚Ç¨)": round(total_cost, 2),
            "Marge (‚Ç¨)": round(marge, 2),
            "Taux (%)": round(taux, 1) if taux else None,
            "Note": note,
            "Prix conseill√© (‚Ç¨)": round(prix_conseille, 2) if prix_conseille else None,
            "Delta (‚Ç¨)": round(delta_prix, 2) if delta_prix else None,
            "Delta (%)": round(delta_pct, 1) if delta_pct else None,
            "Ajustement": ajustement
        }

    plats_analyzes = selected_plats if selected_plats else all_plats
    df = pd.DataFrame([analyse_plat(p) for p in plats_analyzes])

    marge_moy = df["Marge (‚Ç¨)"].mean()
    taux_moy = df["Taux (%)"].mean()

    col1, col2 = st.columns(2)
    col1.metric("üí∞ Marge Moyenne", f"{marge_moy:.2f} ‚Ç¨")
    col2.metric("üìà Taux de Marge Moyen", f"{taux_moy:.1f} %")

    classement_key = "Marge (‚Ç¨)" if classement_par == "Marge (‚Ç¨)" else "Taux (%)"

    if not selected_plats:
        top5 = df[df["Taux (%)"] >= seuil_marge].sort_values(classement_key, ascending=False).head(5)
        flop5 = df[df["Taux (%)"] < seuil_marge].sort_values(classement_key, ascending=True).head(5)

        col3, col4 = st.columns(2)
        with col3:
            st.markdown(f"### ü•á Top 5 ({classement_key})")
            st.dataframe(top5, use_container_width=True, hide_index=True)
        with col4:
            st.markdown(f"### ‚ùå Flop 5 ({classement_key})")
            st.dataframe(flop5, use_container_width=True, hide_index=True)

        st.markdown("---")
        st.markdown("### üìå Recommandations")
        if not flop5.empty:
            for _, row in flop5.iterrows():
                st.warning(f"üîß \"{row['Plat']}\" est sous le seuil ({row['Taux (%)']}%). Pensez √† ajuster le prix ou les ingr√©dients.")
        else:
            st.success("‚úÖ Tous les plats analys√©s sont au-dessus du seuil de rentabilit√©.")

    st.markdown("### üîé D√©tail des plats s√©lectionn√©s")
    st.dataframe(df.sort_values(classement_key, ascending=False), use_container_width=True, hide_index=True)

    import plotly.express as px
    st.markdown("### üìä Comparaison Visuelle (Prix vs Co√ªt vs Marge)")

    df_chart = df[["Plat", "Prix (‚Ç¨)", "Co√ªt (‚Ç¨)", "Marge (‚Ç¨)", "Taux (%)"]].copy().dropna()
    if filtre_sous_seuil:
        df_chart = df_chart[df_chart["Taux (%)"] < seuil_marge]

    df_melt = df_chart.melt(id_vars="Plat", value_vars=["Prix (‚Ç¨)", "Co√ªt (‚Ç¨)", "Marge (‚Ç¨)"],
                            var_name="Type", value_name="Valeur (‚Ç¨)")
    fig = px.bar(df_melt, x="Plat", y="Valeur (‚Ç¨)", color="Type", barmode="group")
    st.plotly_chart(fig, use_container_width=True)






elif mode_analysis == "Modifier un plat":
    st.markdown("## ‚úèÔ∏è Gestion des plats personnalis√©s")

    if "brouillons" not in st.session_state:
        st.session_state.brouillons = load_drafts()
    if "plat_actif" not in st.session_state:
        st.session_state.plat_actif = None
    if "vue_actuelle" not in st.session_state:
        st.session_state.vue_actuelle = "Mes plats"

    mode_vue = st.radio("Navigation", ["Mes plats", "√âdition"], index=0 if st.session_state.vue_actuelle == "Mes plats" else 1)

    # ======= MES PLATS =======
    if mode_vue == "Mes plats":
        st.session_state.vue_actuelle = "Mes plats"
        st.markdown("### üìã Mes plats personnalis√©s")

        if not st.session_state.brouillons:
            st.info("Aucun plat personnalis√© pour le moment.")
        else:
            for i, plat in enumerate(st.session_state.brouillons):
                col1, col2, col3, col4 = st.columns([3, 2, 1, 1])
                col1.markdown(f"**{plat['nom']}** (base : _{plat['base']}_)")
                col2.markdown(f"üí∞ Vente : **{plat.get('prix_vente', 0):.2f} ‚Ç¨**")
                if col3.button("‚úèÔ∏è Modifier", key=f"edit_{i}"):
                    st.session_state.plat_actif = plat
                    st.session_state.vue_actuelle = "√âdition"
                    st.rerun()
                if col4.button("üóëÔ∏è Supprimer", key=f"delete_{i}"):
                    st.session_state.brouillons = [b for b in st.session_state.brouillons if b["nom"] != plat["nom"]]
                    save_drafts(st.session_state.brouillons)
                    st.success(f"Plat supprim√© : {plat['nom']}")
                    st.rerun()

    # ======= √âDITION =======
    elif mode_vue == "√âdition":
        st.session_state.vue_actuelle = "√âdition"

        if st.button("üîÑ R√©initialiser la modification"):
            st.session_state.plat_actif = None
            st.rerun()

        if st.session_state.plat_actif is None:
            st.markdown("### ‚ûï Cr√©er un nouveau plat personnalis√©")
            plat_selectionne = st.selectbox("üçï Choisissez un plat de base", recettes["plat"].unique(), key="plat_de_base")
            ingr_base = ingredients[ingredients["plat"].str.lower() == plat_selectionne.lower()].copy()
            ingr_base = calculer_cout(ingr_base)

            nom_personnalise = st.text_input("‚úèÔ∏è Nom du nouveau plat", value=f"{plat_selectionne} personnalis√©", key="nom_creation")
            prix_base = prix_vente_dict.get(plat_selectionne, 10.0)
            prix_nouveau = st.number_input("üí∞ Prix de vente", min_value=1.0, value=prix_base, step=0.5, key="prix_creation")

            if st.button("üöÄ D√©marrer la modification", key="btn_creer"):
                st.session_state.plat_actif = {
                    "nom": nom_personnalise,
                    "base": plat_selectionne,
                    "composition": ingr_base.to_dict(orient="records"),
                    "prix_vente": prix_nouveau
                }
                st.rerun()
            st.stop()

        # --- √âdition ---
        plat_data = st.session_state.plat_actif
        ingr_modifie = pd.DataFrame(plat_data["composition"])
        ingr_dispo = ingredients["ingredient"].unique()

        nouveau_nom = st.text_input("‚úèÔ∏è Nom du plat", value=plat_data["nom"], key="edit_nom")
        prix_vente = st.number_input("üí∞ Prix de vente (‚Ç¨)", min_value=1.0, value=plat_data.get("prix_vente", 10.0), step=0.5, key="edit_prix")

        st.markdown("### üîÅ Modifier des ingr√©dients")

        max_replace = 3
        for idx in range(max_replace):
            with st.expander(f"üîÑ Remplacement #{idx + 1}", expanded=(idx == 0)):
                if not ingr_modifie.empty:
                    ingr_orig = st.selectbox(f"Ingr√©dient √† remplacer #{idx + 1}", ingr_modifie["ingredient"].unique(), key=f"rempl_orig_{idx}")
                    ingr_nouv = st.selectbox(f"Remplacer par", ingr_dispo, key=f"rempl_nouv_{idx}")
                    qty_nouv = st.number_input("Quantit√© (g)", min_value=0.0, value=50.0, step=5.0, key=f"rempl_qty_{idx}")

                    if st.button("‚úîÔ∏è Appliquer", key=f"btn_apply_{idx}"):
                        ingr_modifie = ingr_modifie[ingr_modifie["ingredient"] != ingr_orig]
                        data_new = ingredients[ingredients["ingredient"] == ingr_nouv].iloc[0]
                        new_row = {
                            "ingredient": ingr_nouv,
                            "quantite_g": qty_nouv,
                            "prix_kg": data_new["prix_kg"],
                            "Co√ªt (‚Ç¨)": (qty_nouv * data_new["prix_kg"]) / 1000
                        }
                        ingr_modifie = pd.concat([ingr_modifie, pd.DataFrame([new_row])], ignore_index=True)
                        st.success(f"Remplacement effectu√© : {ingr_orig} ‚Üí {ingr_nouv}")
                        st.session_state.plat_actif["composition"] = ingr_modifie.to_dict(orient="records")
                        st.rerun()

        st.markdown("### ‚ûï Ajouter un ingr√©dient")
        ingr_suppl = st.selectbox("Ingr√©dient √† ajouter", ingr_dispo, key="suppl_ajout")
        qty_suppl = st.number_input("Quantit√© du suppl√©ment (g)", min_value=0.0, value=0.0, step=5.0, key="qty_supp")

        if st.button("‚ûï Ajouter le suppl√©ment") and qty_suppl > 0:
            data_suppl = ingredients[ingredients["ingredient"] == ingr_suppl].iloc[0]
            supp_row = {
                "ingredient": ingr_suppl,
                "quantite_g": qty_suppl,
                "prix_kg": data_suppl["prix_kg"],
                "Co√ªt (‚Ç¨)": (qty_suppl * data_suppl["prix_kg"]) / 1000
            }
            ingr_modifie = pd.concat([ingr_modifie, pd.DataFrame([supp_row])], ignore_index=True)
            st.success(f"Ajout√© : {ingr_suppl}")
            st.session_state.plat_actif["composition"] = ingr_modifie.to_dict(orient="records")
            st.rerun()

        ingr_modifie = calculer_cout(ingr_modifie)
        cout_matiere = ingr_modifie["Co√ªt (‚Ç¨)"].sum()
        marge_brute = prix_vente - cout_matiere
        taux_marge = (marge_brute / prix_vente) * 100 if prix_vente else 0

        st.markdown("### üßæ R√©capitulatif")
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("Prix vente", f"{prix_vente:.2f} ‚Ç¨")
        col2.metric("Co√ªt mati√®re", f"{cout_matiere:.2f} ‚Ç¨")
        col3.metric("Marge brute", f"{marge_brute:.2f} ‚Ç¨")
        col4.metric("Taux marge", f"{taux_marge:.1f} %")

        st.markdown("### üìã Nouvelle composition")
        st.dataframe(ingr_modifie[["ingredient", "quantite_g", "prix_kg", "Co√ªt (‚Ç¨)"]], use_container_width=True)

        if st.button("üíæ Sauvegarder"):
            plat_final = {
                "nom": nouveau_nom,
                "base": plat_data["base"],
                "composition": ingr_modifie.to_dict(orient="records"),
                "prix_vente": prix_vente
            }
            brouillons = [b for b in st.session_state.brouillons if b["nom"] != nouveau_nom]
            brouillons.append(plat_final)
            save_drafts(brouillons)
            st.session_state.brouillons = brouillons
            st.session_state.plat_actif = plat_final
            st.success("‚úîÔ∏è Plat sauvegard√© avec succ√®s !")



